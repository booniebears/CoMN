#
# This file is a Makefile for Delve.  If it has the name
# "Makefile.in" then it is a template for a Makefile; to generate
# the actual Makefile, run "./configure", which is a configuration
# script generated by the "autoconf" program (constructs like
# "@foo@" will get replaced in the actual Makefile.
#
# Author: delve (delve@cs.toronto.edu)
# 
# $Id: Makefile.in,v 1.22.2.5.2.2 1997/11/27 17:21:17 revow Exp $

# Current Delve version;  used in various names.

MAJOR_VERSION = 1
MINOR_VERSION = 1
VERSION = $(MAJOR_VERSION).$(MINOR_VERSION)

#----------------------------------------------------------------
# Things you can change to personalize the Makefile for your own
# site (you can make these changes in either Makefile.in or
# Makefile, but changes to Makefile will get lost if you re-run
# the configuration script).
#----------------------------------------------------------------

# Default top-level directories in which to install architecture-
# specific files (exec_prefix) and machine-independent files such
# as scripts (prefix).  The values specified here may be overridden
# at configure-time with the --exec-prefix and --prefix options
# to the "configure" script.
prefix =		@prefix@
exec_prefix =		@exec_prefix@

# The following definition can be set to non-null for special systems
# like AFS with replication.  It allows the pathnames used for installation
# to be different than those used for actually reference files at
# run-time.  INSTALL_ROOT is prepended to $prefix and $exec_prefix
# when installing files.
INSTALL_ROOT =

# Directory from which applications will reference the library of
# Delve scripts (note: you can set the DELVE_LIBRARY environment
# variable at run-time to override this value):
DELVE_LIBRARY = 	$(prefix)/lib/delve/$(VERSION)

# Directory from which applications will reference the master delve
# "data" and "methods" archives (note: you can set the DELVE_PATH
# environment variable at run-time to override this value):
DELVE_PATH = 		$(prefix)/lib/delve

# Path name to use when installing library scripts:
SCRIPT_INSTALL_DIR =	$(INSTALL_ROOT)$(DELVE_LIBRARY)

# Directory in which to install the program delve:
BIN_INSTALL_DIR =	$(INSTALL_ROOT)$(exec_prefix)/bin

# Top-level directory in which to install manual entries (when they
# get written):
MAN_INSTALL_DIR =	$(INSTALL_ROOT)$(prefix)/man

# Directory in which to install manual entry for delve (when it gets
# written):
MAN1_INSTALL_DIR =	$(MAN_INSTALL_DIR)/man1

# Directory in which to install manual entries for Delve's
# C library procedures (when they get written):
MAN3_INSTALL_DIR =	$(MAN_INSTALL_DIR)/man3

# Directory in which to install manual entries for the built-in
# Delve commands (when they get written):
MANN_INSTALL_DIR =	$(MAN_INSTALL_DIR)/mann

# Additional libraries to use when linking.  The "LIBS" part will be
# replaced (or has already been replaced) with relevant libraries as
# determined by the configure script.
MATH_LIBS = 		@MATH_LIBS@
LIBS = 			@LIBS@ $(MATH_LIBS)

# Path to use at runtime to refer to LIB_INSTALL_DIR:
LIB_RUNTIME_DIR =	@TCL_LIB_RUNTIME_DIR@

# To change the compiler switches, for example to change from -O
# to -g, change the following line:
CFLAGS = 		@CFLAGS@

# If the C pre-processor (cpp) needs any special flags to find the
# files "tcl.h" and "tclExtend.h", they should be set on the following
# line:
TCL_INCLUDES =		@TCL_INCLUDES@

# The 'ld' flag specification needed to link with the tcl libraries.
TCL_LIB_SPEC =		@TCL_LIB_SPEC@

# To disable ANSI-C procedure prototypes reverse the comment characters
# on the following lines:
PROTO_FLAGS =
#PROTO_FLAGS =		-DNO_PROTOTYPE

# To enable memory debugging reverse the comment characters on the following
# lines.  Warning:  if you enable memory debugging, you must do it
# *everywhere*, including all the code that calls Tcl, and you must use
# ckalloc and ckfree everywhere instead of malloc and free.
MEM_DEBUG_FLAGS =
#MEM_DEBUG_FLAGS =	-DTCL_MEM_DEBUG

# Some versions of make, like SGI's, use the following variable to
# determine which shell to use for executing commands:
SHELL =			/bin/sh

# We used to let the configure script choose which program to use
# for installing, but there are just too many different versions of
# "install" around;  better to use the install-sh script that comes
# with the distribution, which is slower but guaranteed to work.

INSTALL =		$(TOP_SRC_DIR)/install-sh -c
INSTALL_PROGRAM =	${INSTALL}
INSTALL_DATA =		${INSTALL} -m 644

#----------------------------------------------------------------
# The information below is modified by the configure script when
# Makefile is generated from Makefile.in.  You shouldn't normally
# modify any of this stuff by hand.
#----------------------------------------------------------------
SRC_DIR =		@srcdir@
TOP_SRC_DIR =		@top_srcdir@
VPATH =			@srcdir@

CC =			@CC@
CPPFLAGS =		@CPPFLAGS@
DEFS =			@DEFS@
LDFLAGS =		@LDFLAGS@

#----------------------------------------------------------------
# The information below should be usable as is.  The configure
# script won't modify it and you shouldn't need to modify it
# either.
#----------------------------------------------------------------

ALL_INCLUDES =		$(TCL_INCLUDES) $(INCLUDES)
ALL_CPPFLAGS =		$(DEFS) $(ALL_INCLUDES) $(CPPFLAGS) $(PROTO_FLAGS) \
			$(MEM_DEBUG_FLAGS) -DDELVE_PATH=\"$(DELVE_PATH)\" \
			-DDELVE_LIBRARY=\"$(DELVE_LIBRARY)\"
MKDIRHIER =		$(TOP_SRC_DIR)/mkdirhier-sh

HDRS =			delve.h
OBJS =			delveAnova.o delveAppInit.o delveAttr.o \
			delveMatrix.o delveRandom.o delveStats.o
SRCS =			delveAnova.c delveAppInit.c delveAttr.c \
			delveMatrix.c delveRandom.c delveStats.c
UTILS =			mloss mgendata mgendir dgenorder dgenproto dinfo dls \
			dmore minfo mls mmore mstats

#### First the 'all' target. ####

all:: delvesh

delvesh: $(OBJS) 
	rm -f $@
	$(CC) -o $@ $(OBJS) $(LDFLAGS) $(TCL_LIB_SPEC) $(LDLIBS) $(LIBS)

doc::
	(cd doc ; make all VERSION="$(VERSION)")

test: delvesh
	@cwd=`pwd`; \
	cd $(SRC_DIR); DELVE_LIBRARY=`pwd`/library; export DELVE_LIBRARY; \
	cd $$cwd; ( echo cd $(SRC_DIR)/tests\; source all ) | ./delvesh

#### For install target. ####

install: install-binaries install-libraries install-doc install-man

install-binaries:: delvesh
	@echo "Installing delvesh"
	@$(MKDIRHIER) $(BIN_INSTALL_DIR)
	@$(INSTALL_PROGRAM) delvesh $(BIN_INSTALL_DIR)/delvesh$(VERSION)
	@rm -f $(BIN_INSTALL_DIR)/delvesh
	@ln -s $(BIN_INSTALL_DIR)/delvesh$(VERSION) $(BIN_INSTALL_DIR)/delvesh
	@for i in $(UTILS); \
	    do \
	    echo "Installing $(SRC_DIR)/utils/$$i"; \
	    $(INSTALL_PROGRAM) $(SRC_DIR)/utils/$$i $(BIN_INSTALL_DIR); \
	    done;

install-libraries: 
	@$(MKDIRHIER) $(DELVE_PATH)/data $(DELVE_PATH)/methods
	@$(MKDIRHIER) $(SCRIPT_INSTALL_DIR)
	@for i in $(SRC_DIR)/library/*.tcl $(SRC_DIR)/library/tclIndex; \
	    do \
	    echo "Installing $$i"; \
	    $(INSTALL_DATA) $$i $(SCRIPT_INSTALL_DIR); \
	    done;

install-man: 
	@$(MKDIRHIER) $(MAN_INSTALL_DIR)

install-doc: 
	(cd doc ; make install VERSION="$(VERSION)")

#### For cleaning up. ####

uninstall::
	@echo "Uninstalling delvesh"
	@rm -f $(BIN_INSTALL_DIR)/delvesh
	@rm -f $(BIN_INSTALL_DIR)/delvesh$(VERSION)
	@for i in $(UTILS); \
	    do \
	    echo "Uninstalling $(SRC_DIR)/utils/$$i"; \
	    rm -f $(BIN_INSTALL_DIR)/$$i; \
	    done;
	@for i in  $(SRC_DIR)/library/*.tcl $(SRC_DIR)/library/tclIndex; \
	    do \
	    echo "Uninstalling $$i"; \
	    rm -f $(SCRIPT_INSTALL_DIR)/`basename $$i`; \
	    done;
	(cd doc ; make uninstall VERSION="$(VERSION)")

clean::
	rm -f *.o *.bak *~ config.info

mostlyclean:: clean
	(cd doc ; make mostlyclean VERSION="$(VERSION)")

realclean:: clean
	(cd doc ; make realclean VERSION="$(VERSION)")
	rm -f delvesh

distclean:: realclean
	(cd doc ; make distclean VERSION="$(VERSION)")
	rm -f config.log config.status config.cache Makefile

#### Miscellaneous stuff. ####

depend:
	makedepend -- $(ALL_CPPFLAGS) -- $(SRCS)

buildincludes::

TAGS::

dist::
	cd $(SRC_DIR)/library ; echo 'auto_mkindex . *.tcl' | tclsh
	(cd doc ; make dist)

#### General rules ####

.c.o:
	$(CC) -c $(ALL_CPPFLAGS) $(CFLAGS) $<

#### For rebuilding the Makefile ####

Makefile: Makefile.in config.status
	$(SHELL) config.status
config.status: configure
	$(SHELL) config.status --recheck
configure: configure.in
	cd $(SRC_DIR); autoconf
