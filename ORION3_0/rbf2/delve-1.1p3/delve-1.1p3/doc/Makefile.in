#
# This file is a Makefile for the Delve documentation.  If it has the
# name "Makefile.in" then it is a template for a Makefile; to generate
# the actual Makefile, run "./configure", which is a configuration
# script generated by the "autoconf" program (constructs like "@foo@"
# will get replaced in the actual Makefile.
#
# Author: Drew van Camp (drew@cs.toronto.edu)
# 
# $Id: Makefile.in,v 1.8.2.2 1996/11/21 21:19:51 revow Exp $

# Current Delve version;  used in various names.

MAJOR_VERSION = 1
MINOR_VERSION = 1
VERSION = $(MAJOR_VERSION).$(MINOR_VERSION)

#----------------------------------------------------------------
# Things you can change to personalize the Makefile for your own
# site (you can make these changes in either Makefile.in or
# Makefile, but changes to Makefile will get lost if you re-run
# the configuration script).
#----------------------------------------------------------------

# Default top-level directories in which to install architecture-
# specific files (exec_prefix) and machine-independent files such
# as scripts (prefix).  The values specified here may be overridden
# at configure-time with the --exec-prefix and --prefix options
# to the "configure" script.
prefix =		@prefix@
exec_prefix =		@exec_prefix@

# The following definition can be set to non-null for special systems
# like AFS with replication.  It allows the pathnames used for installation
# to be different than those used for actually reference files at
# run-time.  INSTALL_ROOT is prepended to $prefix and $exec_prefix
# when installing files.
INSTALL_ROOT =

# Directory from which applications will reference the library of
# Delve scripts, and the master delve "data" and "methods" archives
# (note: you can set the DELVE_LIBRARY environment variable at run-time
# to override this value):
DELVE_LIBRARY = 	$(prefix)/lib/delve/$(VERSION)

# Path name to use when installing documentation:
DOC_INSTALL_DIR =	$(INSTALL_ROOT)$(DELVE_LIBRARY)/doc

# Some versions of make, like SGI's, use the following variable to
# determine which shell to use for executing commands:
SHELL =			/bin/sh

# We used to let the configure script choose which program to use
# for installing, but there are just too many different versions of
# "install" around;  better to use the install-sh script that comes
# with the distribution, which is slower but guaranteed to work.

INSTALL =		$(TOP_SRC_DIR)/install-sh -c
INSTALL_PROGRAM =	${INSTALL}
INSTALL_DATA =		${INSTALL} -m 644

#----------------------------------------------------------------
# The information below is modified by the configure script when
# Makefile is generated from Makefile.in.  You shouldn't normally
# modify any of this stuff by hand.
#----------------------------------------------------------------
SRC_DIR =		@srcdir@
TOP_SRC_DIR =		@top_srcdir@
VPATH =			@srcdir@

LATEX =			@LATEX@
DVIPS =			@DVIPS@
PSNUP =			@PSNUP@

#----------------------------------------------------------------
# The information below should be usable as is.  The configure
# script won't modify it and you shouldn't need to modify it
# either.
#----------------------------------------------------------------

MKDIRHIER =		$(TOP_SRC_DIR)/mkdirhier-sh
SRCS = 			manual.tex \
			sec1.tex sec2.tex sec3.tex sec4.tex \
			sec5.tex sec6.tex sec7.tex sec8.tex \
			appA.tex appB.tex appC.tex appD.tex \
			mystyle.sty

#### First the 'all' target. ####

all: manual.ps manual2.ps

ps: manual.ps manual2.ps

manual.dvi: $(SRCS)
	$(LATEX) manual
	$(LATEX) manual

manual.ps:  manual.dvi
	$(DVIPS) manual

manual2.ps: manual.ps
	$(PSNUP) -2 manual.ps manual2.ps

#### For install target. ####

install::
	@$(MKDIRHIER) $(DOC_INSTALL_DIR)
	@for i in $(SRC_DIR)/*.dvi $(SRC_DIR)/*.ps ; \
	    do \
	    if test -r $$i ; then \
		echo "Installing $$i"; \
	        $(INSTALL_DATA) $$i $(DOC_INSTALL_DIR); \
                fi; \
	    done;

#### For cleaning up. ####

uninstall::
	@echo "Uninstalling documentation"
	@for i in $(SRC_DIR)/*.dvi $(SRC_DIR)/*.ps ; \
	    do \
	    if test -r $$i ; then \
	        echo "Uninstalling $$i"; \
	        rm -f $(DOC_INSTALL_DIR)/$$i; \
                fi; \
	    done;

clean::
	rm -f *.aux *.log *.done *.dvi *.toc *.aux.sav *.toc.sav *.bak *~

mostlyclean:: clean

realclean:: clean

distclean:: realclean
	rm -f Makefile

#### Miscellaneous stuff. ####

depend::

buildincludes::

TAGS::

dist:: 
	make ps VERSION="$(VERSION)"
	rm -f *.aux *.log *.done *.toc *.aux.sav *.toc.sav *.bak *~

#### General rules ####

#### For rebuilding the Makefile ####

Makefile: Makefile.in $(TOP_SRC_DIR)/config.status
	cd $(TOP_SRC_DIR) ; $(SHELL) config.status
$(TOP_SRC_DIR)/config.status: $(TOP_SRC_DIR)/configure
	cd $(TOP_SRC_DIR) ; $(SHELL) config.status --recheck
$(TOP_SRC_DIR)/configure: $(TOP_SRC_DIR)/configure.in
	cd $(TOP_SRC_DIR) ; autoconf

